jinfo -flags PID 运行时数据
 eg:
    -XX:CICompilerCount=4 -XX:CompressedClassSpaceSize=260046848 -XX:ConcGCThreads=2 -XX:G1ConcRefinementThreads=8 -XX:G1HeapRegionSize=1048576 -XX:GCDrainStackTargetSize=64 -XX:+HeapDumpOnOutOfMemoryError -XX:InitialHeapSize=268435456 -XX:MarkStackSize=4194304 -XX:MaxHeapSize=536870912 -XX:MaxMetaspaceSize=268435456 -XX:MaxNewSize=321912832 -XX:MinHeapDeltaBytes=1048576 -XX:NonNMethodCodeHeapSize=5836300 -XX:NonProfiledCodeHeapSize=122910970 -XX:ProfiledCodeHeapSize=122910970 -XX:ReservedCodeCacheSize=251658240 -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseG1GC

jmap -heap PID 运行时堆内存

线上定位问题步骤:
    1.先执行top,找到CPU占用比较高的进程
    2.jstack 进程id > show.txt
    3.找到进程中CPU占用比较高的线程，线程id转为16进制
    4.到show.txt文件中根据线程id查看线程的具体状态即可


jps
    java process status
    jps -l 主类全名
    jps -m 运行传入主类的参数
    jps -v 虚拟机参数
jstat
    类加载，内存，垃圾收集，JIT编译信息
jinfo
    实时调整和查看虚拟机参数
    -XX:[+/-]option
    -XX:option=value
jmap
    jmap -dump:format=b,file=filepath.dump PID
    jmap -histo PID
jhat
    JVM heap Analysis tools
jstack
    eg:打印线程dump信息
jconsole






=============>如何产生dump文件<=============
1.JVM的配置文件中配置：

例如：堆初始化大小，而堆最大大小

在应用启动时配置相关的参数 -XX:+HeapDumpOnOutOfMemoryError，当应用抛出OutOfMemoryError时生成dump文件。

在启动的时候，配置文件在哪个目录下面：

-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=目录+产生的时间.hprof

JVM启动时增加两个参数:

#出现 OOME 时生成堆 dump:

-XX:+HeapDumpOnOutOfMemoryError

#生成堆文件地址：

-XX:HeapDumpPath=/home/liuke/jvmlogs/
2. 发现程序异常前通过执行指令，直接生成当前JVM的dmp文件，6214是指JVM的进程号

jmap -dump:file=文件名.dump [pid]

jmap -dump:format=b,file=serviceDump.dat 6214
由于第一种方式是一种事后方式，需要等待当前JVM出现问题后才能生成dmp文件，实时性不高，第二种方式在执行时，JVM是暂停服务的，所以对线上的运行会产生影响。所以建议第一种方式。


=======>如何打印GC日志？(JDK8)<==========
XX:+PrintGCDetails
-XX:+PrintGCTimeStamps
-XX:+PrintGCDateStamps
-Xloggc:garbage-collection.log

=======>开启Jvisual远程连接<=========
1、普通jar
在RUN_CMD后面追加：
#指定hostname 一般情况需要重新指定hostname,否则连接不成功
-Djava.rmi.server.hostname=192.168.0.147
#指定hostname 指定端口默认：1099
-Dcom.sun.management.jmxremote.port=8899
#禁止ssl连接
-Dcom.sun.management.jmxremote.ssl=false
#禁止用户认证
-Dcom.sun.management.jmxremote.authenticate=false
java -Dcom.sun.management.jmxremote.port=9527 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -jar *.jar

2、远程连接启动authenticate、ssl参数
  以authenticate设置为例
  a)  jmx连接使用安全凭证，这里的凭证不是linux的登录账号密码，需要单独设置
  b)  jar程序启动命令
  java -Dcom.sun.management.jmxremote.port=12345 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.access.file=/usr/local/jmxremote.access -Dcom.sun.management.jmxremote.password.file=/usr/local/jmxremote.password -jar foo.jar
  c) jmxremote.access内容
  admin readwrite
  d) jmxremote.password内容
  admin 123456
  使用 service:jmx:rmi:///jndi/rmi:///jmxrmi 连接到XX.xx.xx.x
  e) 两个文件授权（必须按下面方式授权，chmod777都不行）
  chmod 600 jmxremote.access
  chmod 600 jmxremote.password
  chown root:root jmxremote.access
  chown root:root jmxremote.password

=======>top<=========
top -H


========>JVM常见参数<===========
无论是设置内存大小还是选用不同的GC Collector都可以通过JVM参数的形式，所以我们有必要了解一下JVM参数相关的内容。
    标准参数
        -help
        -server
        -client
        -version
        -showversion
        -cp
        -classpath
    X参数
        非标准参数，也就是在jvm各个版本中可能会变
         -Xint
         -Xcomp
         -Xmixed
    XX参数
        解释执行 第一次使用就编译成本地代码
        混合模式，JVM自己来决定是否编译成本地代码
        平时用的最多的参数类型 非标准化参数，相对不稳定，主要用于JVM调优和Debug
        a.Boolean类型
         格式:-XX:[+-]<name> 表示启用或者禁用name属性
         比如:
             -XX:+UseConcMarkSweepGC 表示启用CMS类型的垃圾回收器
             -XX:+UseG1GC 表示启用CMS类型的垃圾回收器
        b.非Boolean类型 格式:-XX<name>=<value>表示name属性的值是value
         比如:
            -XX:MaxGCPauseMillis=500
        特殊参数
         -Xmx -Xms 设置最大最小内存的 不是X参数，而是XX参数
         -Xms等价于-XX:InitialHeapSize
         -Xmx等价于-XX:MaxHeapSize
         -Xss等价于-XX:ThreadStackSize
    查看JVM运行时参数
        得先知道当前的值是什么，然后才能设置调优
        =表示默认值
        :=表示被用户或JVM修改后的值
        查看PID:
            jps -l，专门用来查看java进程的
        jinfo 查看已经运行的jvm里面的参数值
        jinfo -flag MaxHeapSize PID 查看最大内存
        jinfo -flag UseG1GC PID 查看垃圾回收器
        jinfo -flags PID 查看曾经赋过值的一些参数
    jstat查看JVM统计信息
        (1)类装载
            jstat -class PID 1000 10   PID进程ID，1000每个一秒钟，10输出10次
        (2)垃圾收集
            jstat -gc PID 1000 10

    内存溢出和优化
        内存不够用主要分为两个方面:
            堆和非堆 所以这时候就要去手动设置堆或者非堆的大小，然后程序中不停使用相对应的区域，等待内存溢出。
            关键是内存溢出之后，怎么得到溢出信息进行分析，有两种做法 参数设置自动
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=./
        jmap手动
        查看当前进程id PID
        jmap -dump:format=b,file=heap.hprof PID
        jmap -heap PID 打印出堆内存相关的信息
        当内存信息打印出来之后，发现看不懂，怎么办呢?得要有工具帮助我们看这块的信息，比如MAT
        小结:这块可以适当增加内存的大小，这样防止内存溢出，减少垃圾回收的频率
    GC调优
        (1)查看目前JVM使用的垃圾回收器
            [root@pretty ~]# jinfo -flag UseParallelGC 6925
            -XX:+UseParallelGC --->发现使用了ParallelGC
            [root@pretty ~]# jinfo -flag UseG1GC 6925
            -XX:-UseG1GC --->发现没有使用G1GC
        (2)将垃圾回收器修改为G1 -XX:+UseG1GC
            [root@pretty ~]# jinfo -flag UseG1GC 7158 -XX:+UseG1GC
        (3)打印出日志详情信息和日志输出目录文件
             PrintGCDetails:打印日志详情信息 PrintGCTimeStamps:输出GC的时间戳(以基准时间的形式)
             -XX:+PrintGCDetails
             -XX:+PrintGCTimeStamps
             -XX:+PrintGCDateStamps
             -Xloggc:$CATALINA_HOME/logs/g1gc.log
        (4)将日志用工具来分析，看相应的参数
    JVM调优小结
        内存大小设置——>dump出日志
        使用MAT工具分析
        垃圾收集器选择———>dump出GC日志 gceasy或者GCViewer











